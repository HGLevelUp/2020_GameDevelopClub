#include <stdio.h>
#include <conio.h>
#include <time.h>
#include <stdlib.h>
#include <Windows.h>

void Init();
void Update();
void Render();
void gotoxy(int x, int y);
void ScreenInit();
void ScreenFlipping();
void ScreenClear();

class Position {
	int x, y;
public:
	Position() {}
	Position(int x, int y) {
		this->x = x;
		this->y = y;
	}

	int GetX() {
		return x;
	}

	int GetY() {
		return y;
	}

	Position GetPos() {
		return Position(this->x, this->y);
	}

	void SetPos(int x, int y) {
		this->x = x;
		this->y = y;
	}

	Position operator+ (Position pos) {
		return Position(this->x + pos.x, this->y + pos.y);
	}

	Position operator- (Position pos) {
		return Position(this->x - pos.x, this->y - pos.y);
	}

	Position operator= (Position pos) {
		return Position(this->x = pos.x, this->y = pos.y);
	}

	bool operator== (Position pos) {
		if (this->x == pos.x && this->y == pos.y)
			return true;
		else
			return false;
	}
};



void ScreenPrint(int x, int y, const char* string);
void ScreenPrint(Position pos, const char* string);

void gotoxy(Position pos);

class Object {
	Position pos;
	Position LimitPos;
	int PosOffset;
	const char* Text = NULL;

public:
	Object() {}
	Object(const char Text[]) {
		this->Text = Text;
	}

	void SetPosOffset(int Offset) {
		PosOffset = Offset;
	}

	void SetLimitPos(Position limitpos) {
		LimitPos = limitpos;
	}


	void SetLimitPos(int x, int y) {
		LimitPos.SetPos(x, y);
	}



	void Render() {
		if (pos.GetX() > -1 && pos.GetY() > -1 && Text != NULL)
			ScreenPrint(pos.GetX(), pos.GetY(), Text);
	}

	void Update() {

	}

	Position GetPos() {
		return pos;
	}


	void SetPos(Position pos) {
		this->pos = pos;
	}

	void SetText(const char Text[]) {
		this->Text = Text;
	}


	void Move(Position pos) {
		this->pos = this->pos + pos;
	}

	void Move(int x, int y) {
		this->pos.SetPos(this->pos.GetX() + x, this->pos.GetY() + y);
	}
};

class Map {
	Object map[20][20];


public:
	Map() {
		for (int y = 0; y < 20; y++) {
			for (int x = 0; x < 20; x++) {
				map[y][x].SetPos(Position(x, y));
				map[y][x].SetText("■");
			}
		}
	}

	void RenderMep() {
		for (int y = 0; y < 20; y++) {
			for (int x = 0; x < 20; x++) {
				if (y == 0 || y == 19 || x == 0 || x == 19) {
					map[y][x].SetPos(Position(x * 2, y));
					map[y][x].Render();
				}
			}
		}
	}
};

class Mob {
	Object mob;
public:
	bool isMove = false;
public:
	void Init(const char t[], int x = -1, int y = -1) {
		mob.SetText(t);

		mob.SetPos(Position(x, y));
		isMove = false;
	}
	Position GetPos() {
		return mob.GetPos();
	}
	void Render() {
		if (isMove)
			mob.Render();
	}

	void Update() {
		if (mob.GetPos().GetY() >= 19) {
			Reset();
		}
	}

	void SetPos(Position pos) {
		mob.SetPos(pos);
	}

	void Reset() {
		isMove = false;
		mob.SetPos(Position(-1, -1));
	}
};

class Monster {
	Mob mob[30];
	int ctrlMobIndex = 0;
	int Time = 0;
public:
	Monster(const char t[]) {
		for (int i = 0; i < 30; i++) {
			mob[i].Init("<□>");
			mob[i].SetPos(Position(-1, -1));
		}
	}

	Mob* GetMob(int index) {
		return &mob[index];
	}

	void Update() {
		for (int i = 0; i < 30; i++) {
			mob[i].Update();
		}

		if (clock() - Time >= 1000) {
			Time = clock();
			mobDown();
			RandomSpawn();
		}
	}

	void Render() {
		for (int i = 0; i < 30; i++) {
			mob[i].Render();
		}
	}

	void mobDown() {
		for (int i = 0; i < 30; i++) {
			if (mob[i].isMove) {
				mob[i].SetPos(mob[i].GetPos() + Position(0, 1));
			}
		}
	}

	void RandomSpawn() {
		mob[ctrlMobIndex].SetPos(Position((rand() % 34) + 1, 1));
		mob[ctrlMobIndex].isMove = true;
		ctrlMobIndex = (ctrlMobIndex + 1) % 30;
	}

	void debug() {
		char temp[100];
		for (int i = 0; i < 30; i++) {
			sprintf_s(temp, "X : %d, Y : %d, %d", mob[i].GetPos().GetX(), mob[i].GetPos().GetY(), mob[i].isMove);
			ScreenPrint(50, 0 + i, temp);
		}
	}
};

Monster monster("<□>");

class Player {
	Object player;
	Position BulletPos;
	Object Bullet[30];
	int ShootBulletNumber = 0;
	int Score = 0;

public:
	Player() {
		for (int i = 0; i < 30; i++) {
			Bullet[i].SetPos(Position(-1, -1));
			Bullet[i].SetText("l");
		}

		player.SetText("◁l▷");
		BulletPos.SetPos(player.GetPos().GetX() + 3, player.GetPos().GetY() - 2);
	}

	void Render() {
		player.Render();
		for (int i = 0; i < 30; i++) {
			Bullet[i].Render();
		}
		static char TempStr[30];
		sprintf_s(TempStr, "점수 : %d", Score);
		ScreenPrint(40, 0, TempStr);
	}

	void Update() {
		BulletPos.SetPos(player.GetPos().GetX() + 2, player.GetPos().GetY());
		player.Update();
		static int time = 0;

		if (clock() - time >= 100) {
			for (int i = 0; i < 30; i++) {
				if (Bullet[i].GetPos().GetX() != -1 && Bullet[i].GetPos().GetY() != -1) {
					Bullet[i].Move(0, -1);
					if (Bullet[i].GetPos().GetY() == 0) {
						Bullet[i].SetPos(Position(-1, -1));
						continue;
					}
					for (int m = 0; m < 30; m++) {
						if (Bullet[i].GetPos() == monster.GetMob(m)->GetPos() || Bullet[i].GetPos() == monster.GetMob(m)->GetPos() + Position(1, 0) ||
							Bullet[i].GetPos() == monster.GetMob(m)->GetPos() + Position(2, 0) || Bullet[i].GetPos() == monster.GetMob(m)->GetPos() + Position(3, 0)) {
							Bullet[i].SetPos(Position(-1, -1));
							monster.GetMob(m)->Reset();
							Score += 100;
							break;
						}
					}
				}
			}
			time = clock();
		}
	}

	void SetPos(Position pos) {
		player.SetPos(pos);
	}

	Position GetPos() {
		return player.GetPos();
	}

	void Move(Position pos) {
		player.Move(pos);
	}



	void Move(int x, int y) {
		player.Move(x, y);
	}

	void Shoot() {
		static int delay = 50;
		static int time = 0;

		if (clock() - time >= delay) {
			Bullet[ShootBulletNumber].SetPos(BulletPos);
			ShootBulletNumber = (ShootBulletNumber + 1) % 30;
			Bullet[0].Render();
			time = clock();
		}
	}
};



static int ScreenIndex;
static HANDLE ScreenHandle[2];

bool PlayGame = true;
Player player;
Map map;


int main() {
	srand((unsigned)time(NULL));
	Init();

	while (PlayGame) {
		Update();
		Render();
	}
	return 0;
}



void Init() {
	ScreenInit();
	player.SetPos(Position(5, 5));
	map.RenderMep();
	//for (int i = 0; i < 5; i++) {
	//	Mob[i].SetText("<□>");
	//	Mob[i].SetPos(Position((i + 2) * 5, 3));
	//}
}



void Update() {
	static int time = 0;
	player.Update();
	monster.Update();
	//for (int i = 0; i < 5; i++) {
	//	Mob[i].Update();
	//}

	if (_kbhit()) {
		char key = _getch();
		switch (key)
		{
		case 'a':
		case 'A':
			if (player.GetPos().GetX() >= 3)
				player.Move(-1, 0);
			break;
		case 'd':
		case 'D':
			if (player.GetPos().GetX() <= 32)
				player.Move(1, 0);
			break;
		case 'w':
		case 'W':
			if (player.GetPos().GetY() >= 2)
				player.Move(0, -1);
			break;
		case 's':
		case 'S':
			if (player.GetPos().GetY() <= 17)
				player.Move(0, 1);
			break;
		case ' ':
			player.Shoot();
		default:
			break;
		}
	}

	if (clock() - time > 1000) {
		time = clock();
		for (int i = 0; i < 5; i++) {
			//Mob[i].Move(Position(0, 1));
		}
	}
}



void Render() {
	ScreenClear();
	map.RenderMep();
	player.Render();
	monster.Render();
	monster.debug();
	ScreenFlipping();
}

void gotoxy(int x, int y) {
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), { (short)x, (short)y });
}



void gotoxy(Position pos) {
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), { (short)pos.GetX(), (short)pos.GetY() });
}


void ScreenInit() {
	CONSOLE_CURSOR_INFO cci;

	//콘솔 버퍼 2개
	ScreenHandle[0] = CreateConsoleScreenBuffer(GENERIC_READ | GENERIC_WRITE, 0, NULL, CONSOLE_TEXTMODE_BUFFER, NULL);
	ScreenHandle[1] = CreateConsoleScreenBuffer(GENERIC_READ | GENERIC_WRITE, 0, NULL, CONSOLE_TEXTMODE_BUFFER, NULL);

	cci.dwSize = 1;
	cci.bVisible = FALSE;
	SetConsoleCursorInfo(ScreenHandle[0], &cci);
	SetConsoleCursorInfo(ScreenHandle[1], &cci);
}


void ScreenFlipping() {
	//Sleep(10);
	SetConsoleActiveScreenBuffer(ScreenHandle[ScreenIndex]);
	ScreenIndex = !ScreenIndex;
}

void ScreenClear() {
	COORD Coor = { 0,0 };
	DWORD dw;
	FillConsoleOutputCharacter(ScreenHandle[ScreenIndex], ' ', 200 * 200, Coor, &dw);
}

void ScreenPrint(int x, int y, const char* string) {
	DWORD dw;
	COORD CursorPosition = { x,y };
	SetConsoleCursorPosition(ScreenHandle[ScreenIndex], CursorPosition);
	WriteFile(ScreenHandle[ScreenIndex], string, strlen(string), &dw, NULL);
}

void ScreenPrint(Position pos, const char* string) {
	DWORD dw;
	COORD CursorPosition = { pos.GetX(), pos.GetY() };
	SetConsoleCursorPosition(ScreenHandle[ScreenIndex], CursorPosition);
	WriteFile(ScreenHandle[ScreenIndex], string, strlen(string), &dw, NULL);
}